"use strict";(self.webpackChunk_2_ndbrain=self.webpackChunk_2_ndbrain||[]).push([[3217],{1759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=t(5893),o=t(1151);const s={},r="160. Intersection of Two Linked Lists",l={id:"leetcode/intersection-of-two-linked-lists",title:"160. Intersection of Two Linked Lists",description:"Problem Description",source:"@site/docs/leetcode/0160-intersection-of-two-linked-lists.md",sourceDirName:"leetcode",slug:"/leetcode/intersection-of-two-linked-lists",permalink:"/docs/leetcode/intersection-of-two-linked-lists",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:160,frontMatter:{},sidebar:"leetcodeSidebar",previous:{title:"153. Find Minimum in Rotated Sorted Array",permalink:"/docs/leetcode/find-minimum-in-rotated-sorted-array"}},d={},c=[{value:"Problem Description",id:"problem-description",level:2},{value:"Example",id:"example",level:2},{value:"Approach",id:"approach",level:2},{value:"Two Pointers",id:"two-pointers",level:3},{value:"Explanation",id:"explanation",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"160-intersection-of-two-linked-lists",children:"160. Intersection of Two Linked Lists"}),"\n",(0,i.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",children:"\u21aa LeetCode"})}),"\n",(0,i.jsxs)(n.p,{children:['The problem "Intersection of Two Linked Lists" involves finding the node at which two linked lists intersect.\nGiven two linked lists, ',(0,i.jsx)(n.code,{children:"headA"})," and ",(0,i.jsx)(n.code,{children:"headB"}),", the task is to return the intersection node if the lists intersect, and ",(0,i.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Input:\n\nheadA: 4 -> 1\n               \\\n                8 -> 4 -> 5\n               /\nheadB: 5 -> 6 \n\nOutput: Intersection Node with value 8\n"})}),"\n",(0,i.jsx)(n.h2,{id:"approach",children:"Approach"}),"\n",(0,i.jsx)(n.p,{children:"To solve this problem, we can use the concept of two pointers.\nThe idea is to iterate through both linked lists simultaneously.\nWhen one pointer reaches the end of a list, it starts traversing the other list.\nThis way, the pointers will meet at the intersection point if there is one."}),"\n",(0,i.jsx)(n.h3,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: List[Node], headB: List[Node]) -> Optional[ListNode]:\n        if not headA or not headB:\n            return None\n\n        pointerA, pointerB = headA, headB\n\n        while pointerA != pointerB:\n            pointerA = pointerA.next if pointerA else headB\n            pointerB = pointerB.next if pointerB else headA\n\n        return pointerA\n"})}),"\n",(0,i.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The function ",(0,i.jsx)(n.code,{children:"getIntersectionNode"})," takes two linked lists, ",(0,i.jsx)(n.code,{children:"headA"})," and ",(0,i.jsx)(n.code,{children:"headB"}),", as input."]}),"\n",(0,i.jsxs)(n.li,{children:["It initializes two pointers, ",(0,i.jsx)(n.code,{children:"pointerA"})," and ",(0,i.jsx)(n.code,{children:"pointerB"}),", to the heads of the respective linked lists."]}),"\n",(0,i.jsx)(n.li,{children:"It iterates through the linked lists, updating the pointers based on the current nodes."}),"\n",(0,i.jsx)(n.li,{children:"If either pointer reaches the end of its list, it starts traversing the other list."}),"\n",(0,i.jsx)(n.li,{children:"The pointers will eventually meet at the intersection point or reach the end of both lists."}),"\n",(0,i.jsxs)(n.li,{children:["Returns the intersection node if found, otherwise returns ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The time complexity of this approach is O(m + n), where m and n are the lengths of the two linked lists.\nBoth pointers traverse the combined length of the lists at most twice.\nThe space complexity is O(1) as we only use a constant amount of extra space."})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var i=t(7294);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);