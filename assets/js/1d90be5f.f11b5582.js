"use strict";(self.webpackChunk_2_ndbrain=self.webpackChunk_2_ndbrain||[]).push([[1962],{3342:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(5893),r=t(1151);const o={},l="136. Single Number",s={id:"leetcode/single-number",title:"136. Single Number",description:"Approach",source:"@site/docs/leetcode/0136-single-number.md",sourceDirName:"leetcode",slug:"/leetcode/single-number",permalink:"/docs/leetcode/single-number",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:136,frontMatter:{},sidebar:"leetcodeSidebar",previous:{title:"4. Median of Two Sorted Arrays",permalink:"/docs/leetcode/median-of-two-sorted-arrays"},next:{title:"153. Find Minimum in Rotated Sorted Array",permalink:"/docs/leetcode/find-minimum-in-rotated-sorted-array"}},a={},c=[{value:"Approach",id:"approach",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Bit Manipulation",id:"bit-manipulation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"136-single-number",children:"136. Single Number"}),"\n",(0,i.jsx)(n.h2,{id:"approach",children:"Approach"}),"\n",(0,i.jsx)(n.p,{children:"To solve this problem efficiently, we can utilize the XOR operation.\nThe XOR of all elements in the array will cancel out the duplicates, leaving us with the element that appears only once."}),"\n",(0,i.jsx)(n.p,{children:"Let's take an example to understand this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"arr = [4, 3, 2, 4, 2]\n\nresult = 0\n\nfor num in arr:\n    result ^= num\n\nprint(result)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the XOR of all elements in the array will be ",(0,i.jsx)(n.code,{children:"4 ^ 3 ^ 2 ^ 4 ^ 2"}),", which is equal to ",(0,i.jsx)(n.code,{children:"3"}),".\nThe result will be the single number we're looking for."]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"bit-manipulation",children:"Bit Manipulation"}),"\n",(0,i.jsx)(n.p,{children:"Now, let's translate our approach into a Python function:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        result = 0\n\n        for num in nums:\n            result ^= num\n\n        return result\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or, use reduce lambda function like a pro:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return reduce(lambda p, n: p ^ n, nums)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:'In this article, we delved into the "Single Number" problem, discussing an efficient XOR-based approach in Python.\nThis problem not only tests your understanding of bitwise operations but also challenges you to think outside the box.'})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>l});var i=t(7294);const r={},o=i.createContext(r);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);