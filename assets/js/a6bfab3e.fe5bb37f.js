"use strict";(self.webpackChunk_2_ndbrain=self.webpackChunk_2_ndbrain||[]).push([[6519],{5868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(5893),s=t(1151);const r={},a="4. Median of Two Sorted Arrays",o={id:"leetcode/median-of-two-sorted-arrays",title:"4. Median of Two Sorted Arrays",description:"Problem Description",source:"@site/docs/leetcode/0004-median-of-two-sorted-arrays.md",sourceDirName:"leetcode",slug:"/leetcode/median-of-two-sorted-arrays",permalink:"/docs/leetcode/median-of-two-sorted-arrays",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"leetcodeSidebar",next:{title:"22. Generate Parentheses",permalink:"/docs/leetcode/generate-parentheses"}},l={},d=[{value:"Problem Description",id:"problem-description",level:2},{value:"Example",id:"example",level:2},{value:"Approach",id:"approach",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"4-median-of-two-sorted-arrays",children:"4. Median of Two Sorted Arrays"}),"\n",(0,i.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:'The problem "Median of Two Sorted Arrays" requires finding the median of two sorted arrays.\nGiven two sorted arrays, nums1 and nums2, with sizes m and n respectively,\nthe task is to find the median of the two sorted arrays.'}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"nums1 = [1, 3]\nnums2 = [2]\nOutput: 2.0\n\nnums1 = [1, 2]\nnums2 = [3, 4]\nOutput: 2.5\n"})}),"\n",(0,i.jsx)(n.h2,{id:"approach",children:"Approach"}),"\n",(0,i.jsx)(n.p,{children:"To solve this problem, we can use the concept of binary search.\nThe idea is to partition the arrays into two halves in such a way that the elements on the left side are smaller than the elements on the right side.\nBy ensuring this property, we can find the median efficiently."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        # Ensure nums1 is the smaller array\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n\n        m, n = len(nums1), len(nums2)\n        low, high = 0, m\n\n        while low <= high:\n            partitionX = (low + high) // 2\n            partitionY = (m + n + 1) // 2 - partitionX\n\n            maxX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n            minX = float('inf') if partitionX == m else nums1[partitionX]\n\n            maxY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n            minY = float('inf') if partitionY == n else nums2[partitionY]\n\n            if maxX <= minY and maxY <= minX:\n                if (m + n) % 2 == 0:\n                    return (max(maxX, maxY) + min(minX, minY)) / 2.0\n                else:\n                    return max(maxX, maxY)\n            elif maxX > minY:\n                high = partitionX - 1\n            else:\n                low = partitionX + 1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The function ",(0,i.jsx)(n.code,{children:"findMedianSortedArrays"})," takes two sorted arrays as input."]}),"\n",(0,i.jsxs)(n.li,{children:["It ensures that ",(0,i.jsx)(n.code,{children:"nums1"})," is the smaller array for optimization purposes."]}),"\n",(0,i.jsxs)(n.li,{children:["It performs binary search on the smaller array (",(0,i.jsx)(n.code,{children:"nums1"}),") to partition it into two halves."]}),"\n",(0,i.jsxs)(n.li,{children:["Calculates the corresponding partitions for the larger array (",(0,i.jsx)(n.code,{children:"nums2"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Determines the elements on the boundaries of the partitions."}),"\n",(0,i.jsx)(n.li,{children:"Checks if the partitions are at the correct position for the median."}),"\n",(0,i.jsx)(n.li,{children:"Adjusts the search space based on the comparison of elements on the boundaries."}),"\n",(0,i.jsx)(n.li,{children:"Finally, returns the median based on the conditions."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The time complexity of this approach is O(log(min(m, n))), where m and n are the sizes of the two arrays.\nThe binary search ensures an efficient search space reduction.\nThe space complexity is O(1) as we only use a constant amount of extra space."}),"\n",(0,i.jsx)(n.p,{children:"This solution provides an optimal way to find the median of two sorted arrays, meeting the time and space constraints."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var i=t(7294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);