"use strict";(self.webpackChunk_2_ndbrain=self.webpackChunk_2_ndbrain||[]).push([[3217],{1759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var i=t(5893),s=t(1151);const o={},r="160. Intersection of Two Linked Lists",d={id:"leetcode/intersection-of-two-linked-lists",title:"160. Intersection of Two Linked Lists",description:"\u21aa LeetCode",source:"@site/docs/leetcode/0160-intersection-of-two-linked-lists.md",sourceDirName:"leetcode",slug:"/leetcode/intersection-of-two-linked-lists",permalink:"/docs/leetcode/intersection-of-two-linked-lists",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/0160-intersection-of-two-linked-lists.md",tags:[],version:"current",sidebarPosition:160,frontMatter:{},sidebar:"leetcodeSidebar",previous:{title:"153. Find Minimum in Rotated Sorted Array",permalink:"/docs/leetcode/find-minimum-in-rotated-sorted-array"}},c={},l=[{value:"Testcase",id:"testcase",level:3},{value:"Two Pointers",id:"two-pointers",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"160-intersection-of-two-linked-lists",children:"160. Intersection of Two Linked Lists"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",children:"\u21aa LeetCode"})}),"\n",(0,i.jsx)(n.p,{children:"input: headA, headB\noutput: Optional[ListNode]"}),"\n",(0,i.jsx)(n.h3,{id:"testcase",children:"Testcase"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"no intersection"}),"\n",(0,i.jsx)(n.li,{children:"intersection occurs"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA:List[Node],headB:List[Node])->Optional[ListNode]:\n\n        \n            \n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"different from finding cycle in linked list, no need fast and slow pointers"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>r});var i=t(7294);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);