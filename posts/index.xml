<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 第二大腦</title><link>https://2ndbrain.cc/posts/</link><description>Recent content in Posts on 第二大腦</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 31 Jul 2022 21:00:00 +0800</lastBuildDate><atom:link href="https://2ndbrain.cc/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>部署 Spring Boot application 到 local Kubernetes cluster</title><link>https://2ndbrain.cc/posts/2022/07/spring-boot-on-kubernetes/</link><pubDate>Sun, 31 Jul 2022 21:00:00 +0800</pubDate><guid>https://2ndbrain.cc/posts/2022/07/spring-boot-on-kubernetes/</guid><description>&lt;p>簡單回顧一下之前的這篇&lt;a href="https://2ndbrain.cc/posts/2021/04/spring-boot-docker-image/">建立容器化 Spring Boot 專案&lt;/a>文章中，提到如何容器化 Spring Boot application，本篇要延續這個主題，進階到將 application 部署到 local Kubernetes cluster 上。&lt;/p>
&lt;h1 id="容器化-spring-boot-application">容器化 Spring Boot application&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>使用 &lt;a href="https://start.spring.io">Spring Initailizr&lt;/a> 網站或
&lt;a href="https://www.jetbrains.com/idea/">Intellij IDEA&lt;/a> 內的 Spring Initailizr 創建 Spring Boot application，服務名稱以 &lt;code>moat-api-gateway&lt;/code> 為例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>執行以下指令建置 Docker image 到 local 的 Docker daemon&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Gradle&lt;/th>
&lt;th style="text-align:left">Maven&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>./gradlew bootBuildImage&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;code>./mvnw spring-boot:build-image&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>就可以在 Docker Desktop 的 Dashboard 看到剛剛建置的 &lt;code>moat-api-gateway&lt;/code> image：
&lt;img src="https://2ndbrain.cc/posts/2022/07/img/register-docker-image.png" alt="register-docker-image.png">&lt;/p>
&lt;blockquote>
&lt;p>值得注意的是 image 的建立時間是在 42 年前，為了重複建置 image 時能產出相同 hash 的 image id，所以 Buildpacks 的 timestamp 是固定值 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol></description></item><item><title>在 WebStorm 建置 Jest 單元測試</title><link>https://2ndbrain.cc/posts/2021/09/setup-jest/</link><pubDate>Mon, 06 Sep 2021 22:09:05 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/09/setup-jest/</guid><description>&lt;h1 id="加入-jest-library">加入 Jest Library&lt;/h1>
&lt;p>WebStorm 預設沒有載入 Jest，所以會無法識別 Jest 語法，&lt;br>
要從 Preferences → Languages &amp;amp; Frameworks → JavaScript → Libraries 加入 Jest Library。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">① 點擊 Download&lt;/th>
&lt;th style="text-align:left">② 加入 Jest Library&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;img src="https://2ndbrain.cc/posts/2021/09/img/js-libraries.png" alt="js-libraries">&lt;/td>
&lt;td style="text-align:left">&lt;img src="https://2ndbrain.cc/posts/2021/09/img/download-jest.png" alt="download-jest">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>解決 ORA-02292 問題</title><link>https://2ndbrain.cc/posts/2021/07/resolve-ora-02292/</link><pubDate>Wed, 21 Jul 2021 08:57:42 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/07/resolve-ora-02292/</guid><description>&lt;p>在刪除資料表中的資料，有時會發生 &lt;code>ORA-02292 違反完整性限制條件 (%s.%s) - 發現子項記錄&lt;/code> 錯誤，
導致無法將資料刪除，因為想刪除的資料是其他資料表的 Foreign Key。&lt;/p>
&lt;blockquote>
&lt;p>錯誤代碼: ORA-02292&lt;br>
描述: 違反完整性限制條件 (%s.%s) - 發現子項記錄&lt;br>
原因: 嘗試刪除具有外鍵依賴性的父鍵值。&lt;br>
動作: 首先刪除依賴項，然後刪除父項或禁用約束。&lt;/p>
&lt;/blockquote>
&lt;h1 id="正規刪除">正規刪除&lt;/h1>
&lt;p>當兩張資料表存在著父子階層關係，而父階層的資料是子階層的資料對照，
所以資料庫不允許先將父階層資料刪除。此時想刪除父階層資料，必須先刪除子階層資料。&lt;/p>
&lt;h1 id="取巧刪除">取巧刪除&lt;/h1>
&lt;p>搞不清楚自己在做什麼的話，不要亂用這招。&lt;/p>
&lt;p>若因為某些原因就是想直接刪除父階層資料，而不動到子階層資料時，可以使用禁用約束的方式，
先 disable constraint，刪除想刪的資料後，再 enable constraint，範例如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#859900">alter&lt;/span> &lt;span style="color:#859900">table&lt;/span> {&lt;span style="color:#859900">TABLE_NAME&lt;/span>} &lt;span style="color:#268bd2">disable&lt;/span> &lt;span style="color:#859900">constraint&lt;/span> {&lt;span style="color:#268bd2">FOREIGN_KEY_NAME&lt;/span>} &lt;span style="color:#859900">cascade&lt;/span>;
&lt;span style="color:#93a1a1;font-style:italic">-- 執行刪除資料
&lt;/span>&lt;span style="color:#93a1a1;font-style:italic">&lt;/span>&lt;span style="color:#859900">alter&lt;/span> &lt;span style="color:#859900">table&lt;/span> {&lt;span style="color:#859900">TABLE_NAME&lt;/span>} &lt;span style="color:#268bd2">enable&lt;/span> &lt;span style="color:#268bd2">novalidate&lt;/span> &lt;span style="color:#859900">constraint&lt;/span> {&lt;span style="color:#268bd2">FOREIGN_KEY_NAME&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得特別注意的是，在 enable constraint 時，若沒有加上 &lt;code>novalidate&lt;/code>，
可能會發生 &lt;code>ORA-02298: 無法驗證 (%s.%s) - 未找到父項關鍵字&lt;/code> 錯誤，
因為 Oracle 在 enable constraint 時，會檢核原有資料是否符合約束，
加上 &lt;code>novalidate&lt;/code> 就可以再度繞過資料庫的檢核。&lt;/p>
&lt;p>搞不清楚自己在做什麼的話，不要亂用這招。&lt;/p></description></item><item><title>建置 Gulp 前端自動化整合工具</title><link>https://2ndbrain.cc/posts/2021/07/setup-gulp/</link><pubDate>Sun, 11 Jul 2021 16:40:00 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/07/setup-gulp/</guid><description>&lt;p>最近幫切版專案建置一整套 CI/CD 自動化流程，以後只要 push 到 &lt;code>main&lt;/code> branch 上，
就會自動部署到 GitHub Pages，終於不用自己手動合併到 &lt;code>gh-pages&lt;/code> branch 再 push 囉～&lt;/p>
&lt;h1 id="安裝-gulp-cli">安裝 gulp CLI&lt;/h1>
&lt;p>因為 yarn &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 的執行效能比 npm &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> 好，所以就決定用 Homebrew 安裝 yarn &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> 來管理套件。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">brew install yarn
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 yarn 安裝 gulp &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">yarn global add gulp-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 gulp CLI 是否安裝成功。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">gulp -v
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">CLI version: 2.3.0
Local version: Unknown
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>在 Spring Boot 使用 AOP 印日誌</title><link>https://2ndbrain.cc/posts/2021/06/spring-boot-aop-log/</link><pubDate>Sun, 27 Jun 2021 00:00:00 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/06/spring-boot-aop-log/</guid><description>&lt;p>使用 AOP (Aspect Oriented Programming) 的方式印出日誌，會比在各處程式中寫印日誌來的簡潔，
集中管理印日誌的程式，避免影響閱讀業務邏輯。&lt;/p>
&lt;h1 id="建置-log4j2">建置 Log4j2&lt;/h1>
&lt;p>參考這篇&lt;a href="https://2ndbrain.cc/posts/2021/06/setup-log4j2/">建置 Log4j2&lt;/a> 文章。&lt;/p>
&lt;h1 id="加入-dependency">加入 Dependency&lt;/h1>
&lt;p>在 &lt;code>build.gradle&lt;/code> 加入 Spring Boot AOP dependencies：&lt;code>spring-boot-starter-aop&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#268bd2">dependencies&lt;/span> {
&lt;span style="color:#268bd2">implementation&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">implementation&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.springframework.boot:spring-boot-starter-aop&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">compileOnly&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.projectlombok:lombok:1.18.18&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">annotationProcessor&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.projectlombok:lombok:1.18.18&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">testImplementation&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>建置 Log4j2</title><link>https://2ndbrain.cc/posts/2021/06/setup-log4j2/</link><pubDate>Sat, 26 Jun 2021 17:09:03 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/06/setup-log4j2/</guid><description>&lt;p>Log4j2 是一套執行效能不錯的日誌工具，Lombok &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 將 Log4j2 日誌工具整合其中，
Lombok 也讓 Log4j2 使用起來更簡潔。&lt;/p>
&lt;h1 id="建置-log4j2">建置 Log4j2&lt;/h1>
&lt;p>在 &lt;code>build.gradle&lt;/code> 加入 Lombok dependencies，&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#268bd2">dependencies&lt;/span> {
&lt;span style="color:#268bd2">implementation&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">compileOnly&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.projectlombok:lombok:1.18.18&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">annotationProcessor&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.projectlombok:lombok:1.18.18&amp;#39;&lt;/span>
&lt;span style="color:#268bd2">testImplementation&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>設定 cURL Connect Timeout 時間</title><link>https://2ndbrain.cc/posts/2021/06/curl-connect-timeout/</link><pubDate>Mon, 14 Jun 2021 20:09:55 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/06/curl-connect-timeout/</guid><description>&lt;p>因為 &lt;code>curl&lt;/code> 的預設 Timeout 時間為 5 分鐘&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，所以在進行 Timeout 的測試時，要等待很長的時間，&lt;br>
可以透過設定 &lt;code>--connect-timeout&lt;/code> 參數，以減少等待時間。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="color:#93a1a1;font-style:italic"># 設定 Timeout 為 5 秒&lt;/span>
curl http://localhost:8080 --connect-timeout &lt;span style="color:#2aa198;font-weight:bold">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>執行 Junit Jupiter 測試的疑難雜症</title><link>https://2ndbrain.cc/posts/2021/05/setup-junit-jupiter/</link><pubDate>Sun, 16 May 2021 10:50:16 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/05/setup-junit-jupiter/</guid><description>&lt;p>以下用 Gradle 6.8.3 為例，列出幾個在執行 Junit Jupiter 測試時的疑難雜症，希望能少點踩雷的時間。&lt;/p>
&lt;h3 id="cannot-resolve-symbol-jupiter">Cannot resolve symbol &amp;lsquo;jupiter&amp;rsquo;&lt;/h3>
&lt;p>在 &lt;code>build.gradle&lt;/code> 加入 &lt;code>junit-jupiter&lt;/code> 的 dependency，&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#268bd2">dependencies&lt;/span> {
...
&lt;span style="color:#93a1a1;font-style:italic">// Use JUnit test framework
&lt;/span>&lt;span style="color:#93a1a1;font-style:italic">&lt;/span> &lt;span style="color:#268bd2">testImplementation&lt;/span> &lt;span style="color:#2aa198">&amp;#39;org.junit.jupiter:junit-jupiter-api:5.3.2&amp;#39;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>排程執行 Cucumber 測試</title><link>https://2ndbrain.cc/posts/2021/05/separate-cucumber-test/</link><pubDate>Sun, 02 May 2021 00:30:02 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/05/separate-cucumber-test/</guid><description>&lt;h1 id="何時執行整合測試">何時執行整合測試？&lt;/h1>
&lt;p>通常整合測試執行時間比單元測試長很多，也因為整合測試的執行頻率無法像單元測試一樣頻繁，比較適合每日排程執行。
為了在進行開發而頻繁執行測試時，不需要等待整合測試執行，所以特別將整合測試獨立成一個 Source Set，不和單元測試程式放在一起。&lt;/p>
&lt;p>另一種方式是將整合測試獨立成一個專案，在 Gradle 設定上應該會比較簡單 XD。
以下說明是針對比較搞剛的 Gradle Source Set &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p></description></item><item><title>建立容器化 Spring Boot 專案</title><link>https://2ndbrain.cc/posts/2021/04/spring-boot-docker-image/</link><pubDate>Fri, 30 Apr 2021 16:24:00 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/04/spring-boot-docker-image/</guid><description>&lt;h1 id="建立新-spring-boot-專案">建立新 Spring Boot 專案&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>使用 Intellij IDEA 建立新專案，專案資訊如下：&lt;/p>
&lt;ul>
&lt;li>Spring Boot 版本：2.4.5&lt;/li>
&lt;li>專案類型：Gradle&lt;/li>
&lt;li>語言：Java 11&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">① 使用 Intellij IDEA 內的 Spring Initailizr 創建新專案&lt;/th>
&lt;th style="text-align:left">② 加入 Spring Web Dependency&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;img src="https://2ndbrain.cc/posts/2021/04/img/spring-initializr.png" alt="spring-initializr">&lt;/td>
&lt;td style="text-align:left">&lt;img src="https://2ndbrain.cc/posts/2021/04/img/spring-dependencies.png" alt="spring-dependencies">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>增加 &lt;code>HelloController.java&lt;/code> 如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#dc322f;font-weight:bold">package&lt;/span> &lt;span style="color:#268bd2">cc.secondbrain.demo.controller&lt;/span>;
&lt;span style="color:#dc322f;font-weight:bold">import&lt;/span> &lt;span style="color:#268bd2">org.springframework.web.bind.annotation.RequestMapping&lt;/span>;
&lt;span style="color:#dc322f;font-weight:bold">import&lt;/span> &lt;span style="color:#268bd2">org.springframework.web.bind.annotation.RestController&lt;/span>;
&lt;span style="color:#268bd2">@RestController&lt;/span>
&lt;span style="color:#859900">public&lt;/span> &lt;span style="color:#859900">class&lt;/span> &lt;span style="color:#cb4b16">HelloController&lt;/span> {
&lt;span style="color:#268bd2">@RequestMapping&lt;/span>(&lt;span style="color:#2aa198">&amp;#34;/&amp;#34;&lt;/span>)
&lt;span style="color:#859900">public&lt;/span> &lt;span style="color:#268bd2">String&lt;/span> &lt;span style="color:#268bd2">hello&lt;/span>() {
&lt;span style="color:#859900">return&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Hello Spring Boot&amp;#34;&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>啟動 Spring Boot 服務，用瀏覽器瀏覽 &lt;a href="http://localhost:8080/">http://localhost:8080/&lt;/a>，就可以看到「Hello Spring Boot」&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>查詢系統資訊指令</title><link>https://2ndbrain.cc/posts/2021/04/system-basic-info/</link><pubDate>Mon, 19 Apr 2021 11:35:55 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/04/system-basic-info/</guid><description>&lt;h1 id="linux-系統資訊">Linux 系統資訊&lt;/h1>
&lt;p>查看 Linux 版本資訊&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">cat /etc/os-release
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 Linux Kernel 版本資訊&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">uname -r
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>202102 演化式設計：測試驅動開發與持續重構 -- 心得</title><link>https://2ndbrain.cc/posts/2021/04/202102-tdd-refactoring/</link><pubDate>Sat, 17 Apr 2021 22:12:25 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/04/202102-tdd-refactoring/</guid><description>&lt;p>上完 [演化式設計：測試驅動開發與持續重構] &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，課後兩個月補記心得和筆記。&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 熟練 Tennis Kata TDD 練習，&lt;a href="https://www.youtube.com/playlist?list=PLrJYGjv_0MbvrHUrVxyWWDMEl82cvM4VO">上傳到 Youtube 頻道&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 了解 &lt;a href="https://refactoring.guru/refactoring/smells">Code Smell&lt;/a> 和 &lt;a href="https://refactoring.guru/refactoring/techniques">Refactoring&lt;/a> 相關知識&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 熟練課堂上的 &lt;code>BudgetCalculator&lt;/code> TDD 重構練習&lt;/li>
&lt;/ul>
&lt;h1 id="專業有價">專業有價&lt;/h1>
&lt;p>早在 2018 左右就聽說 91 的課 &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，當時看到上課時間居然在半年後，而且一堂課要價超過一萬元，就一直處於觀望狀態而沒有報名課程。
幸好在這期間我看了《刻意練習》後，就一直心心念念想找到利用「&lt;strong>刻意練習&lt;/strong>」模式教學的課程，再加上我開始認同「專業有價」，花錢就能買到別人累積的功力，超級划算。
於是，在剩下最後幾個名額時，趕緊手刀報名，心裡想不管發生什麼事，都不能妨礙我去上課，要是再不做出行動，現在這門課是開課前一年就額滿 ⋯⋯&lt;/p></description></item><item><title>Hugo 教學 -- 進階篇</title><link>https://2ndbrain.cc/posts/2021/04/get-advanced-hugo/</link><pubDate>Sat, 17 Apr 2021 00:19:16 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/04/get-advanced-hugo/</guid><description>&lt;p>本篇利用 Hugo 建立個人化網站，基本應用參考 Hugo 系列文：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://2ndbrain.cc/posts/2021/04/get-started-hugo/">Hugo 教學 &amp;ndash; 基礎篇&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://2ndbrain.cc/posts/2021/04/get-advanced-hugo/">Hugo 教學 &amp;ndash; 進階篇&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="custom-domain">Custom Domain&lt;/h1>
&lt;ol>
&lt;li>在 &lt;a href="https://tw.godaddy.com/">GoDaddy&lt;/a> 購買屬於自己的網域，例如：&lt;code>2ndbrain.cc&lt;/code>&lt;/li>
&lt;li>在 Terminal 用指令 &lt;code>dig&lt;/code> 查詢個人 GitHub Pages 的 IP
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">dig {YOUR_USER_NAME}.github.io
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>在 &lt;a href="https://dcc.godaddy.com/domains">GoDaddy&lt;/a> 設定 IP 和 轉址 Domain&lt;/li>
&lt;li>在 Repository &lt;code>{YOUR_USER_NAME}.github.io&lt;/code> 的 &lt;code>Settings &amp;gt;&amp;gt; Pages&lt;/code> 設定 Custom domain&lt;/li>
&lt;li>在 Repository &lt;code>{YOUR_USER_NAME}.github.io&lt;/code> 的根目錄加入 &lt;code>CNAME&lt;/code> 檔案
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="color:#cb4b16">echo&lt;/span> &lt;span style="color:#2aa198">&amp;#39;YOUR_DOMAIN&amp;#39;&lt;/span> &amp;gt;&amp;gt; CNAME
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="color:#cb4b16">echo&lt;/span> &lt;span style="color:#2aa198">&amp;#39;2ndbrain.cc&amp;#39;&lt;/span> &amp;gt;&amp;gt; CNAME
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Hugo 教學 -- 基礎篇</title><link>https://2ndbrain.cc/posts/2021/04/get-started-hugo/</link><pubDate>Sun, 11 Apr 2021 20:29:12 +0800</pubDate><guid>https://2ndbrain.cc/posts/2021/04/get-started-hugo/</guid><description>&lt;p>本篇利用 Hugo 從無到有建立個人網站，進階應用參考 Hugo 系列文：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://2ndbrain.cc/posts/2021/04/get-started-hugo/">Hugo 教學 &amp;ndash; 基礎篇&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://2ndbrain.cc/posts/2021/04/get-advanced-hugo/">Hugo 教學 &amp;ndash; 進階篇&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="get-started-1-2">Get Started &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/h1>
&lt;ol>
&lt;li>在 &lt;a href="https://github.com/">GitHub&lt;/a> 建立一個 Private Repository &lt;code>hugo-site&lt;/code> 管理網站原始碼&lt;/li>
&lt;li>在 &lt;a href="https://github.com/">GitHub&lt;/a> 建立一個 Public Repository &lt;code>{YOUR_USER_NAME}.github.io&lt;/code> 用來上傳靜態網頁到 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>&lt;/li>
&lt;li>下載 &lt;code>hugo-site&lt;/code> 到 Local
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">git clone https://github.com/{YOUR_USER_NAME}/hugo-site.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或下載包含 Git Submodule 的 Repository 到 Local&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">git clone --recursive https://github.com/{YOUR_USER_NAME}/hugo-site.git
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>使用 &lt;a href="https://brew.sh/index_zh-tw">Homebrew&lt;/a> 安裝 &lt;a href="https://gohugo.io/">Hugo&lt;/a>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;a href="https://gohugo.io/commands/hugo_version/">Hugo CLI&lt;/a> 確認 &lt;a href="https://gohugo.io/">Hugo&lt;/a> 安裝是否成功&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">hugo version
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>在放置 &lt;code>hugo-site&lt;/code> 的同層路徑（非 &lt;code>hugo-site&lt;/code> 資料夾內），使用 &lt;a href="https://gohugo.io/commands/hugo_new_site/">Hugo CLI&lt;/a> 建立新靜態頁面網站
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">hugo new site hugo-site
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>若發生以下錯誤：&lt;/p>
&lt;p>&lt;code>Error: /path/to/hugo-site already exists and is not empty. See --force.&lt;/code>&lt;/p>
&lt;p>加上參數 &lt;code>--force&lt;/code> 強制建立網站&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">hugo new site hugo-site --force
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;li>在 &lt;a href="https://themes.gohugo.io/">themes.gohugo.io&lt;/a> 網站樣式，Fork 欲選樣式的 Repository 到自己的 GitHub，以方便調整樣式&lt;/li>
&lt;li>以 &lt;code>hugo-theme-next&lt;/code> 樣式 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> 為例，將樣式專案以 Submodule 形式加入 &lt;code>hugo-site&lt;/code>
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="color:#cb4b16">cd&lt;/span> hugo-site
git submodule add https://github.com/{YOUR_USER_NAME}/hugo-theme-next.git themes/next
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>根據 &lt;code>./themes/next/config.toml&lt;/code> 的設定調整 &lt;code>./config.toml&lt;/code>&lt;/li>
&lt;li>使用 &lt;a href="https://gohugo.io/commands/hugo_new/">Hugo CLI&lt;/a> 建立新文章
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">hugo new posts/2021/04/get-started-hugo.md
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>使用 &lt;a href="https://gohugo.io/commands/hugo_server/">Hugo CLI&lt;/a> 在 Local 起 Server，建置並在 &lt;a href="http://localhost:1313/">http://localhost:1313/&lt;/a> 檢視網站更新
&lt;div class="highlight">&lt;pre style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">hugo server -D
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>檢視新文章
&lt;a href="http://localhost:1313/posts/2021/04/get-started-hugo/">http://localhost:1313/posts/2021/04/get-started-hugo/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>使用 &lt;a href="https://gohugo.io/commands/hugo/">Hugo CLI&lt;/a> 在 &lt;code>hugo-site/public&lt;/code> 建製靜態網頁&lt;/li>
&lt;li>將 &lt;code>hugo-site/public&lt;/code> Push 到 Repository &lt;code>{YOUR_USER_NAME}.github.io&lt;/code> 後，在 https://{YOUR_USER_NAME}.github.io/ 檢視網站更新&lt;/li>
&lt;/ol></description></item></channel></rss>